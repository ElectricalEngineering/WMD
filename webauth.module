<?php
/**
 * @file
 * Authenticates users through Stanford WebAuth
 *
 */

define('WEBAUTH_DOMAIN', 'stanford.edu');

/**
 * Implements hook_boot().
 *
 * This functions very very early, before most of Drupal has even loaded.
 *
 * The sole purposes of this function is to insure HTTPS protocol, and
 * the security of the session.
 */
function webauth_boot() {
  if (!empty($_SERVER['HTTPS'])) {
    global $base_url, $user, $base_path;
    // Mandate HTTPS for sessions.
    ini_set('session.cookie_secure', 1);
    $base_url = str_replace('http://', 'https://', $base_url);
    if ($user->uid > 0) {
      setcookie("WMDsecureLogin", 1, REQUEST_TIME + 3600, $base_path);
    }
  }
  elseif (isset($_COOKIE["WMDsecureLogin"]) && $_COOKIE["WMDsecureLogin"]) {
    // An session seems to exist, but we are not in HTTPs.
    // Redirect so we can start secure session.
    global $base_url, $base_path;
    $url = $base_url . '?q=' . $_GET['q'];
    $url = str_replace('http://', 'https://', $url);
    header("Location: $url");
  }
}


/**
 * Implements hook_init().
 *
 * If a user was created via webauth, we validate their session there.
 *
 * This function also insures that webauth is handling 403s, and that
 * pages for logged in users are not cached in browsers.
 */
function webauth_init() {
  global $_webauth_session, $user;

  $is_return_url = (bool) ($_GET['q'] == variable_get('webauth_path', conf_path() . '/webauth') . '/login');
  $no_check_php_loop = (bool) (array_pop(explode('/', $_GET['q'])) != 'check.php');
  $access_denied_page = variable_get('site_403', '');

  // Update our access denied page.
  if ($access_denied_page != 'webauth/403') {
    variable_set('site_403', 'webauth/403');
  }

  if ($user->uid > 0 && $no_check_php_loop) {
    header("Cache-Control: no-store, no-cache, must-revalidate");
    // We only want to go further and check the wa_session if this user is
    // authenticated via webauth.
    if (db_query("SELECT * FROM {authmap} WHERE uid = :uid and module = :module", array(':uid' => $user->uid, ':module' => 'webauth'))->fetchField()) {
      $_webauth_session = new WebAuthSession();
      if ($_webauth_session->isLoggedIn() && !$_webauth_session->isValidSession()) {
        // An invalid webauth token was in found!
        // Destroy the current session
        session_destroy();
        // Only variables can be passed by reference workaround.
        $null = NULL;
        user_module_invoke('user/logout', $null, $user);
        // Load the anonymous user
        $user = drupal_anonymous_user();
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function webauth_menu() {
  $items = array();

  // Setup our authentication URL
  $path = variable_get('webauth_path', conf_path() . '/webauth') . '/login';

  $items[$path] = array(
    'page callback' => 'webauth_return',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['webauth/403'] = array(
    'page callback' => 'webauth_error_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/webauth'] = array(
    'title' => 'WebAuth',
    'description' => 'Authenticate through Stanford WebAuth',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webauth_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'webauth.admin.inc',
  );

  $items['admin/config/webauth/settings'] = array(
    'title' => 'WebAuth Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/webauth/authorizations'] = array(
    'title' => 'Authorizations',
    'description' => 'Edit the users and groups that are required for access.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webauth_admin_users'),
    'access arguments' => array('administer site configuration'),
    'file' => 'webauth.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/webauth/mappings'] = array(
    'title' => 'Role Mappings',
    'description' => 'Edit the groups that can use WebAuth for content access.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webauth_admin_groups'),
    'access arguments' => array('administer site configuration'),
    'file' => 'webauth.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Handle 403 errors by redirecting users to webauth for login.
 *
 * If, however, they are already logged in and don't have access
 * (for instance, a normal user requesting /admin), then display
 * a normal error message.
 */
function webauth_error_page() {
  global $_webauth_session, $user;
  if (!$_webauth_session) {
    $_webauth_session = new WebAuthSession();
  }
  if (!$user->uid) {
    $redirect = NULL;
    if (trim(variable_get('webauth_destination', '')) != '') {
      $redirect = trim(variable_get('webauth_destination', ''));
    }
    else {
      $redirect = str_replace(base_path(), '', request_uri());
      $redirect = str_replace("?q=", '', $redirect);
    }
    $_webauth_session->getWeblogin($redirect);
  }
  if ($user->uid) {
    drupal_add_http_header('Status', '403 Forbidden');
    drupal_set_title(t('Access denied'));
    $webauth_restrict_message = trim(filter_xss_admin(variable_get('webauth_restrict_message', 'This content has been restricted by the author or by the site administrator.')));
    if (empty($webauth_restrict_message)) {
      drupal_access_denied();
    }
    else {
      // D7 port: "Line 171: Instead of "theme('page')" use drupal_set_page_content (Drupal Docs)"
      // The recommended change will break this functionality, so a better method should be determined.
      // TODO Please change this theme call as discussed at http://drupal.org/node/224333#theme_page.
      print theme('page', $webauth_restrict_message);
    }
    exit;
  }
}

/**
 * Function to return from webauth login from.
 *
 * This handles logging a user in and then redirecting them to the page they
 * were previously on.
 */
function webauth_return() {
  global $_webauth_session, $user;
  if (!$_webauth_session) {
    $_webauth_session = new WebAuthSession();
  }

  if ($user->uid == 0) {
    if ($_webauth_session->isValidSession()) {
      $form_state = array();
      $form_state['values']['name'] = $_webauth_session->getSessionData('wa_remote_user');
      $form_state['values']['pass'] = 'dummy';
      $form_state['weblogin']['server'] = variable_get('webauth_domain', WEBAUTH_DOMAIN);
      drupal_form_submit('user_login', $form_state);
    }
    else {
      return $_webauth_session->getWeblogin();
    }
  }

  if (!$_webauth_session->isValidSession()) {
    drupal_set_message(t('Unknown error occurred.'));
  }
  $return = $_webauth_session->getReturnUrl(TRUE);
  $login = variable_get('webauth_path', conf_path() . '/webauth') . '/login';
  if (substr($return, 0, strlen($login)) == $login) {
    $return = '';
  }
  drupal_goto($return);
}

/**
 * Implements hook_theme().
 */
function webauth_theme($existing, $type, $theme, $path) {
  return array(
    'webauth_htaccess' => array(
      'variables' => array('groups' => NULL, 'require_valid_user' => NULL, 'users' => NULL, 'privgroups' => NULL, 'rewrite_url' => NULL),
      'template' => 'webauth_htaccess',
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * This insures that user login elements are webauth-enabled.
 *
 * TODO: it should not be necessary to start a WebAuthSession() every time this
 * hook is invoked. Could be done more tactically.
 */
function webauth_form_alter(&$form, &$form_state, $form_id) {
  global $user, $base_url, $_webauth_session;

  if (!$_webauth_session) {
    $_webauth_session = new WebAuthSession();
  }

  switch ($form_id) {
    case 'user_profile_form':
      $account = $form['_account']['#value'];
      if (!empty($account->roles)) {
        if (in_array(variable_get('webauth_default_role', ''), array_keys($account->roles))) {
          // Hide elements for SUNet Users.
          $form['account']['name']['#type'] = 'hidden';
          $form['account']['name']['#value'] = $form['_account']['#value']->name;
          $form['account']['pass']['#type'] = 'hidden';
        }
      }
      break;
    case 'user_login_block':
    case 'user_login':
      if (isset($form_state['weblogin']['server'])) {
        $form['#validate'] = array(
          'user_login_name_validate',
          'webauth_login_validate',
          'user_login_final_validate',
        );
      }
      // drupal_execute() for user_login comes here, and we can lose our login
      // redirect context, so if we are on the auth path here, we should stop
      // altering at this point.
      //
      // I don't love this fix, but it's necssary given how the $_webauth_session
      // object is constructued at the moment.
      $path = variable_get('webauth_path', conf_path() . '/webauth') . '/login';
      if ($_GET['q'] == $path) {
        return;
      }

      // Build a link to wa_login.
      $secure_base_url = str_replace('http:', 'https:', $base_url);
      $webauth_login = $_webauth_session->getLoginUrl($_GET['q']);
      $form['webauth_link'] = array(
        '#prefix' => '<div id="webauth-link">', // make it themable
        '#value' => l(t(variable_get('webauth_link_text', 'Login with your SUNetID')), $webauth_login),
        '#suffix' => '</div>',
        '#weight' => -10,
      );

      if ($form_id == 'user_login_block') {
        $allow_local = variable_get('webauth_allow_local', TRUE);
        if (!$allow_local) {
          unset($form['name']);
          unset($form['pass']);
          unset($form['submit']);
          unset($form['links']);
        }
      }
      break;
  }
}

/**
 * Implements hook_user_login().
 */
function webauth_user_login(&$edit, &$account) {
  // If this is a WebAuth account, check for roles and re-grant new roles.
  if (db_query("SELECT * FROM {authmap} WHERE uid = :uid and module = :module", array(':uid' => $account->uid, ':module' => 'webauth'))->fetchField()) {
    webauth_grant_roles($edit, $account);
  }
}

/**
 * Implements hook_user_insert().
 */
function webauth_user_insert(&$edit, &$account, $category) {
  webauth_update_fields($edit, $account);
}

/**
 * Implements hook_user_delete().
 */
function hook_user_delete($account) {
  db_delete('webauth_roles_history')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_user_logout().
 */
function hook_user_logout($account) {
  if (isset($_COOKIE['WMDsecureLogin'])) {
    unset($_COOKIE['WMDsecureLogin']);
    setcookie('WMDsecureLogin', '', REQUEST_TIME - 3600);
  }
  unset($_SESSION['wa_session_data']);
  unset($_SESSION['wa_return_url']);
}

/**
 * This is a helper function to store webauth-derived data for the user account.
 */
function webauth_update_fields(&$edit, &$account) {
  // We only want to run these if the user is self-creating via webauth.
  // Otherwise an admin user will transpose their own values onto any
  // account they manually create.
  global $_webauth_session;
  global $user;
  if ($user->uid == 0) {
    if (!$_webauth_session) {
      $_webauth_session = new WebAuthSession();
    }

    $mail = $_webauth_session->getSessionData('wa_ldap_mail');
    $mail =  isset($mail) ? $mail : $account->name;
    db_update('users')
      ->fields(array(
        'mail' => $mail,
      ))
      ->condition('uid', $account->uid)
      ->execute();
  }
}

/**
 * This is a helper function to grant drupal roles based on webauth data.
 *
 * This is called when new users are created via webauth, or when "local"
 * drupal users log in. It could also be invoked by other operations to
 * sync up a users roles based on their webauth settings.
 */
function webauth_grant_roles(&$edit, &$account) {
  global $_webauth_session;
  if (!$_webauth_session) {
    $_webauth_session = new WebAuthSession();
  }

  if ($_webauth_session->isValidSession()) {
    $groups = $_webauth_session->getLdapGroups();
    $new = array('roles' => $account->roles);

    // Add SUNet User role for all valid users.
    $default_name = db_query("SELECT name FROM {role} WHERE rid = :rid", array(':rid' => variable_get('webauth_default_role', 0)))->fetchField();
    if (variable_get('webauth_default_role', 0) != 0 && !isset($new['roles'][variable_get('webauth_default_role', 0)])) {
      $new['roles'][variable_get('webauth_default_role', 0)] = $default_name;
    }

    // Unserialize data.
    $data = unserialize($account->data);
    $data = is_array($data) ? $data : array();
    $current = array();

    // Find all roles that are in the webauth_roles table and add any ones that user is in.
    $result = db_query("SELECT r.rid, r.name, wr.wa_group AS `group`, wr.warid FROM {webauth_roles} wr INNER JOIN {role} r ON r.rid = wr.rid");
    while ($role = $result->fetchObject()) {
      if (in_array($role->group, $groups)) {
        $new['roles'][$role->rid] = $role->name;
        $data['webauth_assigned_roles'][$role->rid] = $role->name;
        $current[$role->rid] = $role->rid;
        db_delete('webauth_roles_history')
          ->condition('warid', $role->warid)
          ->condition('uid', $account->uid)
          ->execute();
        $id = db_insert('webauth_roles_history')
          ->fields(array(
            'warid' => $role->warid,
            'uid' => $account->uid,
            'rid' => $role->rid,
          ))
          ->execute();
      }
    }
    // Close out any groups they shouldn't have access to.
    $result = db_query("SELECT * FROM {webauth_roles_history} WHERE uid = :uid", array(':uid' => $account->uid));
    while ($role = $result->fetchObject()) {
      if (!isset($current[$role->rid])) {
        unset($data['webauth_assigned_roles'][$role->rid]);
        unset($new['roles'][$role->rid]);
        db_delete('webauth_roles_history')
          ->condition('uid', $account->uid)
          ->condition('rid', $role->rid)
          ->execute();
        db_delete('users_roles')
          ->condition('uid', $account->uid)
          ->condition('rid', $role->rid)
          ->execute();
      }
    }

    $account->data = serialize($data);
    user_save($account, $new);
  }
}

/**
 * Perform webauth validation on users who come in via the normal Drupal login
 * form or block.
 */
function webauth_login_validate($form, &$form_state) {
  global $_webauth_session;
  if (!$_webauth_session) {
    $_webauth_session = new WebAuthSession();
  }
  if ($_webauth_session->isValidSession()) {
    user_external_login_register($form_state['values']['name'] . '@' . $form_state['weblogin']['server'], 'webauth');
    user_authenticate_finalize($form_state['values']);
  }
}

/**
 * Function to write out our .htaccess file.
 */
function webauth_write_htaccess() {
  global $_webauth_session;

  if (!$_webauth_session) {
    $_webauth_session = new WebAuthSession();
  }

  $groups = array();
  $user_list = '';
  $rewrite_url = '';

  // Get all the available groups
  $result = db_query("SELECT DISTINCT(wa_group) AS `group` FROM {webauth_roles} WHERE rid > :rid", array(':rid' => 2));
  while ($group = $result->fetchField()) {
    $groups[] = $group;
  }

  $user_list = array();
  $users = explode("\n", variable_get('webauth_require_users', ''));
  foreach ($users as $u) {
    $u = trim($u);
    if ($u != '') {
      $user_list[] = $u;
    }
  }

  $privgroup_list = array();
  $privgroups = explode("\n", variable_get('webauth_require_privgroups', ''));
  foreach ($privgroups as $p) {
    $p = trim($p);
    if ($p != '') {
      $privgroup_list[] = $p;
    }
  }


  if (!variable_get('clean_url', 0)) {
    $path = $_webauth_session->getLoginUrl();
    $new_path = base_path() . '?q=' . variable_get('webauth_path', conf_path() . '/webauth') . '/login';
    $rewrite_url .= 'RewriteRule login(.*)$ ' . $new_path . '$1 [L,R=301]';
  }

  // Theme contents of the .htaccess file.
  $htaccess_file = theme('webauth_htaccess', array('groups' => $groups, 'require_valid_user' => variable_get('webauth_require_valid_user', 0), 'users' => $user_list, 'privgroups' => $privgroup_list, 'rewrite_url' => $rewrite_url));

  // Get the path or create it inside the files dir.
  $webauth_path = variable_get('webauth_path', conf_path() . '/webauth');

  // Set .htaccess file location
  $webauth_htaccess = $webauth_path . '/.htaccess';

  // If webauth dir doesn't exist yet, create it.
  if (@is_dir($webauth_path) === FALSE) {
    // Create dir.
    mkdir($webauth_path, 0755);
  }

  // Copy necessary check.php file over.
  $default_check_file = drupal_get_path('module', 'webauth') . '/default/check.php';
  copy($default_check_file, $webauth_path . '/check.php');


  // Save .htaccess file to location.
  $fp = fopen($webauth_htaccess, 'w');
  fwrite($fp, $htaccess_file);
  fclose($fp);
}
