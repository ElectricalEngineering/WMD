<?php
// $Id: webauth.module 1806 2010-03-18 16:32:08Z ksharp $
/**
 * @file
 * Authenticates users through Stanford WebAuth
 *
 */
 
include_once(drupal_get_path('module', 'webauth') . '/WebAuthSession.inc');

/**
 * Implementation of hook_init().
 */
function webauth_init() {
  global $wa_session, $user;
  
  if (variable_get('webauth_nossl', FALSE)) {
    return;
  }
  
  // Setup some variables about forwarding.
  $is_forwarded = (bool) isset($_SERVER['HTTP_X_FORWARDED_HOST']);
  $has_xhost = (bool) strcmp($_SERVER['HTTP_X_FORWARDED_HOST'], 
                             variable_get('webauth_xhost','')) !== 0;
  $is_return_url = (bool) $_GET['q'] == drupal_get_path('module', 'webauth') . '/auth/login';
                             
	// If we are running behind a proxy server, save the xhost value in our drupal variables.
	if ($is_forwarded && !$has_xhost) {
		variable_set('webauth_xhost', $_SERVER['HTTP_X_FORWARDED_HOST']);
	}
	
	// Start new WebAuthSession.
	if (!$is_return_url) {
    $wa_session = new WebAuthSession();
  }
}


/**
 * Implementation of hook_menu().
 */
function webauth_menu() {
  $items = array();
  
  // Setup our authentication URL
  $path = variable_get('webauth_path', conf_path() . '/webauth') . '/login';
  
  $items[$path] = array(
    'page callback' => 'webauth_return',
    'access arguments' => array('access content'),
  );
  
  $items['admin/settings/webauth'] = array(
    'title' => 'WebAuth',
    'description' => 'Authenticate through Stanford WebAuth',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webauth_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'webauth.admin.inc',
  );
  
  $items['admin/settings/webauth/settings'] = array(
    'title' => 'WebAuth Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/settings/webauth/groups'] = array(
    'title' => 'WebAuth Groups',
    'description' => 'Edit the groups that can use Webauth for content access.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webauth_admin_groups'),
    'access arguments' => array('administer site configuration'),
    'file' => 'webauth.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Function to return from webauth login from.
 */
function webauth_return() {
  global $wa_session, $user;
  
  $wa_session = new WebAuthSession();
  //print_r($wa_session);

  if (!$user->uid) {
    if ($wa_session->isValidSession()) {
      $form_state = array();
      $form_state['values']['name'] = $wa_session->getSessionData('wa_user');
      $form_state['values']['pass'] = 'dummy';
      $form_state['weblogin']['server'] = 'stanford.edu';
      drupal_execute('user_login', $form_state);
    }
    else {
      drupal_set_message(print_r($wa_session, TRUE));
      $wa_session->getWeblogin();
    }
  }
  
  if (!$wa_session->isValidSession()) {
    drupal_set_message('Unknown error occurred.');
  }
  
  drupal_goto($wa_session->getReturnUrl());
}

/**
 * Implementation of hook_theme().
 */
function webauth_theme($existing, $type, $theme, $path) {
  return array(
    'webauth_htaccess' => array(
      'arguments' => array('groups' => NULL),
      'template' => 'webauth_htaccess',
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function webauth_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  
  switch ($form_id) {
    case 'user_profile_form':
      $account = $form['_account']['#value'];
      if ($user->uid == $account->uid) {
        // If we are editing our own account.
        if (!empty($account->roles)) {
          foreach ($account->roles as $role) {
            if ($role == t('SUNet User')) {
              // Hide elements for SUNet Users.
              $form['account']['name']['#type'] = 'hidden';
              $form['account']['name']['#value'] = $form['account']['name']['#default_value'];
              $form['account']['pass']['#type'] = 'hidden';
            }
          }
        }
      }
      break;
    case 'user_login_block':
    case 'user_login':
      if (isset($form_state['weblogin']['server'])) {
        $form['#validate'] = array('webauth_auth');
      }

      // build a link to wa_login.
      // added double quotes to webauth link - Lance Simms 8/13/08
      $webauth_login = variable_get('webauth_path', conf_path() . '/webauth') . '/login';
      $wa_url = l(variable_get('webauth_link_text','SUNetID'), $webauth_login);
      $form['webauth_link'] = array(
        '#prefix' => '<div id="webauth-link">',  // make it themable
        '#value' => $wa_url,
        '#suffix' => '</div>',
        '#weight' => -10
      );

      if ($form_id == 'user_login_block') {
        $allow_local = variable_get('webauth_allow_local', TRUE);
        if (!$allow_local) {
          unset($form['name']);
          unset($form['pass']);
          unset($form['submit']);
          unset($form['links']);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_user().
 */
function webauth_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'login':
      webauth_grant_roles($account);
      break;
  }
}

function webauth_grant_roles(&$account) {
  global $wa_session;
  if (!$wa_session) {
    $wa_session = new WebAuthSession();
  }
  
  if ($wa_session->isValidSession()) {
    $groups = $wa_session->getLdapGroups();
    print_r($groups);
  }
}

function webauth_auth($form, &$form_state) {
  global $wa_session;
  
  if ($wa_session->isValidSession() && $form_state['submitted']) {
    user_external_login_register($form_state['values']['name'] . '@' . $form_state['weblogin']['server'], 'webauth');
  }
}

/**
 * Function to write out our .htaccess file.
 */
function webauth_write_htaccess() {
  $groups = array();
  
  // Get all the available groups
  $result = db_query("SELECT DISTINCT(wa_group) AS `group` FROM {webauth_roles} WHERE rid > 2");
  while ($group = db_result($result)) {
    $groups[] = $group;
  }
  
  // Theme contents of the .htaccess file.
  $htaccess_file = theme('webauth_htaccess', $groups);
  
  // Get the path or create it inside the files dir.
  $webauth_path = variable_get('webauth_path', conf_path() . '/webauth');

  // Set .htaccess file location
  $webauth_htaccess = $webauth_path . '/.htaccess';

  // If webauth dir doesn't exist yet, create it.      
  if (@is_dir($webauth_path) === FALSE) {
    file_check_directory($webauth_path, FILE_CREATE_DIRECTORY + FILE_MODIFY_PERMISSIONS);
    // Copy necessary check.php file over.
    $default_check_file = drupal_get_path('module', 'webauth') . '/default/check.php';
    file_copy($default_check_file, $webauth_path. '/check.php', FILE_EXISTS_REPLACE);
  }
  
  // Save .htaccess file to location.
  $fp = fopen($webauth_htaccess, 'w');
  fwrite($fp, $htaccess_file);
  fclose($fp);
}
