<?php
// $Id: webauth.module 1806 2010-03-18 16:32:08Z ksharp $
/**
 * @file
 * Authenticates users through Stanford WebAuth
 *
 */

define('WEBAUTH_DOMAIN', 'stanford.edu');
include_once(dirname(__FILE__) . '/WebAuthSession.inc');

/**
 * Implementation of hook_boot()
 */
function webauth_boot() {
  if (!empty($_SERVER['HTTPS'])) {
    global $base_url, $user, $base_path;
    ini_set('session.cookie_secure', 1);
    $base_url = str_replace('http://', 'https://', $base_url);
    if ($user->uid > 0) {
      setcookie("WMDsecureLogin", 1, time()+3600, $base_path);
    }
  }
  elseif ($_COOKIE["WMDsecureLogin"]) {
    // Redirect so we can get secure session.
    global $base_url, $base_path;
    $url = $base_url . '?q=' . $_GET['q'];
    $url = str_replace('http://', 'https://', $url);
    header("Location: $url");
  }
}


/**
 * Implementation of hook_init().
 */
function webauth_init() {
  global $wa_session, $user;

  if (variable_get('webauth_nossl', FALSE)) {
    return;
  }

  // Setup some variables about forwarding.
  $is_forwarded = (bool) isset($_SERVER['HTTP_X_FORWARDED_HOST']);
  $has_xhost = (bool) strcmp($_SERVER['HTTP_X_FORWARDED_HOST'],
                             variable_get('webauth_xhost','')) !== 0;
  $is_return_url = (bool) $_GET['q'] == drupal_get_path('module', 'webauth') . '/auth/login';
  $access_denied_page = variable_get('site_403', '');

  // Update our access denied page.
  if ($access_denied_page != 'webauth/403') {
    variable_set('site_403', 'webauth/403');
    variable_set('webauth_403', $access_denied_page);
  }

  // If we are running behind a proxy server, save the xhost value in our drupal variables.
  if ($is_forwarded && !$has_xhost) {
    variable_set('webauth_xhost', $_SERVER['HTTP_X_FORWARDED_HOST']);
  }

  // Start new WebAuthSession.
  if (!$user->uid && !$is_return_url) {
    $wa_session = new WebAuthSession();
    if (!$wa_session->isValidSession()) {
      header("Cache-Control: no-store, no-cache, must-revalidate");
      user_logout();
    }
  }
  else {
    // Make sure we don't get any pages in browser cache.
    if ($user->uid > 0) {
      header("Cache-Control: no-store, no-cache, must-revalidate");
    }
  }

}

/**
 * Implementation of hook_menu().
 */
function webauth_menu() {
  $items = array();

  // Setup our authentication URL
  $path = variable_get('webauth_path', conf_path() . '/webauth') . '/login';

  $items[$path] = array(
    'page callback' => 'webauth_return',
    'access arguments' => array('access content'),
  );

  $items['webauth/403'] = array(
    'page callback' => 'webauth_error_page',
    'access arguments' => array('access content'),
  );

  $items['admin/settings/webauth'] = array(
    'title' => 'WebAuth',
    'description' => 'Authenticate through Stanford WebAuth',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webauth_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'webauth.admin.inc',
  );

  $items['admin/settings/webauth/settings'] = array(
    'title' => 'WebAuth Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/settings/webauth/authorizations'] = array(
    'title' => 'Authorizations',
    'description' => 'Edit the users and groups that are required for access.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webauth_admin_users'),
    'access arguments' => array('administer site configuration'),
    'file' => 'webauth.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/settings/webauth/mappings'] = array(
    'title' => 'Role Mappings',
    'description' => 'Edit the groups that can use WebAuth for content access.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webauth_admin_groups'),
    'access arguments' => array('administer site configuration'),
    'file' => 'webauth.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Handle 403 errors.
 */
function webauth_error_page() {
  global $wa_session, $user;
  if (!$wa_session) {
    $wa_session = new WebAuthSession();
  }
  if (!$user->uid) {
    if (variable_get('clean_url', FALSE) && isset($_SERVER['REDIRECT_URL'])) {
      $redirect = str_replace(base_path(), '', $_SERVER['REDIRECT_URL']);
      //header('HTTP/1.1 200 OK');
      $wa_session->getWeblogin($redirect);
    }
    elseif (isset($_SERVER['REQUEST_URI'])) {
      $redirect = str_replace(base_path(), '', $_SERVER['REQUEST_URI']);
      $redirect = str_replace("?q=", '', $redirect);
      $wa_session->getWeblogin($redirect);
    }
  }
}

/**
 * Function to return from webauth login from.
 */
function webauth_return() {
  global $wa_session, $user;
  if (!$wa_session) {
    $wa_session = new WebAuthSession();
  }

  if (!$user->uid) {
    if ($wa_session->isValidSession()) {
      $form_state = array();
      $form_state['values']['name'] = $wa_session->getSessionData('wa_remote_user');
      $form_state['values']['pass'] = 'dummy';
      $form_state['weblogin']['server'] = variable_get('webauth_domain', WEBAUTH_DOMAIN);
      drupal_execute('user_login', $form_state);
    }
    else {
      return $wa_session->getWeblogin();
    }
  }

  if (!$wa_session->isValidSession()) {
    drupal_set_message('Unknown error occurred.');
  }
  $return = $wa_session->getReturnUrl(TRUE);
  $login = variable_get('webauth_path', conf_path() . '/webauth') . '/login';
  if (substr($return, 0, strlen($login)) == $login) {
    $return = '';
  }
  drupal_goto($return);
}

/**
 * Implementation of hook_theme().
 */
function webauth_theme($existing, $type, $theme, $path) {
  return array(
    'webauth_htaccess' => array(
      'arguments' => array('groups' => NULL, 'require_valid_user' => NULL, 'users' => NULL, 'privgroups' => NULL, 'rewrite_url' => NULL),
      'template' => 'webauth_htaccess',
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function webauth_form_alter(&$form, &$form_state, $form_id) {
  global $user, $base_url, $wa_session;

  if (!$wa_session) {
    $wa_session = new WebAuthSession();
  }

  switch ($form_id) {
    case 'user_profile_form':
      $account = $form['_account']['#value'];
      if ($user->uid == $account->uid) {
        // If we are editing our own account.
        if (!empty($account->roles)) {
          if (in_array(variable_get('webauth_default_role', ''), array_keys($account->roles))) {
            // Hide elements for SUNet Users.
            $form['account']['name']['#type'] = 'hidden';
            $form['account']['name']['#value'] = $form['account']['name']['#default_value'];
            $form['account']['pass']['#type'] = 'hidden';
          }
        }
      }
      break;
    case 'user_login_block':
    case 'user_login':
      if (isset($form_state['weblogin']['server'])) {
        $form['#validate'] = array(
          'user_login_name_validate',
          'webauth_login_validate',
          'user_login_final_validate',
        );
      }
      // drupal_execute() for user_login comes here, and we can lose our login
      // redirect context, so if we are on the auth path here, we should stop
      // altering at this point.
      //
      // I don't love this fix, but it's necssary given how the $wa_session
      // object is constructued at the moment.
      $path = variable_get('webauth_path', conf_path() . '/webauth') . '/login';
      if ($_GET['q'] == $path) {
        return;
      }

      // Build a link to wa_login.
      $secure_base_url = str_replace('http:', 'https:', $base_url);
      $webauth_login = $wa_session->getLoginUrl($_GET['q']);
      $wa_url = l(variable_get('webauth_link_text','SUNetID'), $webauth_login);
      $form['webauth_link'] = array(
        '#prefix' => '<div id="webauth-link">',  // make it themable
        '#value' => $wa_url,
        '#suffix' => '</div>',
        '#weight' => -10
      );

      if ($form_id == 'user_login_block') {
        $allow_local = variable_get('webauth_allow_local', TRUE);
        if (!$allow_local) {
          unset($form['name']);
          unset($form['pass']);
          unset($form['submit']);
          unset($form['links']);
        }
      }
      break;
  }
}


/**
 * Implementation of hook_user().
 */
function webauth_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'login':
      // If we are a local account, check for roles and re-grant new roles.
      if (in_array(variable_get('webauth_default_role', ''), array_keys($account->roles))) {
        webauth_grant_roles($edit, $account);
      }
      break;
    case 'insert':
      webauth_update_fields($edit, $account);
      webauth_grant_roles($edit, $account);
      break;
    case 'delete':
      db_query("DELETE FROM {webauth_roles_history} WHERE uid = %d", $account->uid);
      break;
    case 'logout':
      if (isset($_COOKIE['webauth_at'])) {
        //unset($_COOKIE['webauth_at']);
        //setcookie('webauth_at', '', time() - 3600, '/');
      }
      if (isset($_COOKIE['WMDsecureLogin'])) {
        unset($_COOKIE['WMDsecureLogin']);
        setcookie('WMDsecureLogin', '', time() - 3600);
      }
  }
}

function webauth_update_fields(&$edit, &$account) {
  global $wa_session;
  if (!$wa_session) {
    $wa_session = new WebAuthSession();
  }

  $mail = $wa_session->getSessionData('wa_ldap_mail');
  $mail =  isset($mail) ? $mail : $account->name;
  db_query("UPDATE {users} SET mail = '%s' WHERE uid = %d", $mail, $account->uid);

}

function webauth_grant_roles(&$edit, &$account) {
  global $wa_session;
  if (!$wa_session) {
    $wa_session = new WebAuthSession();
  }

  if ($wa_session->isValidSession()) {
    $groups = $wa_session->getLdapGroups();
    $new = array('roles' => $account->roles);

    // Add SUNet User role for all valid users.
    $default_name = db_result(db_query("SELECT name FROM {role} WHERE rid = %d", variable_get('webauth_default_role', 0)));
    if (variable_get('webauth_default_role', 0) != 0 && !isset($new['roles'][variable_get('webauth_default_role', 0)])) {
      $new['roles'][variable_get('webauth_default_role', 0)] = $name;
    }

    // Unserialize data.
    $data = unserialize($account->data);
    $data = is_array($data) ? $data : array();
    $current = array();

    // Find all roles that are in the webauth_roles table and add any ones that user is in.
    $result = db_query("SELECT r.rid, r.name, wr.wa_group AS `group`, wr.warid FROM {webauth_roles} wr INNER JOIN {role} r ON r.rid = wr.rid");
    while ($role = db_fetch_object($result)) {
      if (in_array($role->group, $groups)) {
        $new['roles'][$role->rid] = $role->name;
        $data['webauth_assigned_roles'][$role->rid] = $role->name;
        $current[$role->rid] = $role->rid;
        db_query("DELETE FROM {webauth_roles_history} WHERE warid = %d AND uid = %d", $role->warid, $account->uid);
        db_query("INSERT INTO {webauth_roles_history} (warid, uid, rid) VALUES (%d, %d, %d)", $role->warid, $account->uid, $role->rid);
      }
    }
    // Close out any groups they shouldn't have access to.
    $result = db_query("SELECT * FROM {webauth_roles_history} WHERE uid = %d", $account->uid);
    while ($role = db_fetch_object($result)) {
      if (!isset($current[$role->rid])) {
        unset($data['webauth_assigned_roles'][$role->rid]);
        unset($new['roles'][$role->rid]);
        db_query("DELETE FROM {webauth_roles_history} WHERE uid = %d AND rid = %d", $account->uid, $role->rid);
        db_query("DELETE FROM {users_roles} WHERE uid = %d AND rid = %d", $account->uid, $role->rid);
      }
    }

    $account->data = serialize($data);
    user_save($account, $new);
  }
}

function webauth_login_validate($form, &$form_state) {
  global $wa_session;

  if ($wa_session->isValidSession()) {
    user_external_login_register($form_state['values']['name'] . '@' . $form_state['weblogin']['server'], 'webauth');
    user_authenticate_finalize($form_state['values']);
  }
}

/**
 * Function to write out our .htaccess file.
 */
function webauth_write_htaccess() {
  global $wa_session;

  if (!$wa_session) {
    $wa_session = new WebAuthSession();
  }

  $groups = array();
  $user_list = '';
  $rewrite_url = '';

  // Get all the available groups
  $result = db_query("SELECT DISTINCT(wa_group) AS `group` FROM {webauth_roles} WHERE rid > 2");
  while ($group = db_result($result)) {
    $groups[] = $group;
  }

  $user_list = array();
  $users = explode("\n", variable_get('webauth_require_users', ''));
  foreach ($users as $u) {
    $u = trim($u);
    if ($u != '') {
      $user_list[] = $u;
    }
  }

  $privgroup_list = array();
  $privgroups = explode("\n", variable_get('webauth_require_privgroups', ''));
  foreach ($privgroups as $p) {
    $p = trim($p);
    if ($p != '') {
      $privgroup_list[] = $p;
    }
  }


  if (!variable_get('clean_url', 0)) {
    $path = $wa_session->getLoginUrl();
    $new_path = base_path() . '?q=' . variable_get('webauth_path', conf_path() . '/webauth') . '/login';
    $rewrite_url .= 'RewriteRule login(.*)$ ' . $new_path . '$1 [L,R=301]';
  }

  // Theme contents of the .htaccess file.
  $htaccess_file = theme('webauth_htaccess', $groups, variable_get('webauth_require_valid_user', 0), $user_list, $privgroup_list, $rewrite_url);

  // Get the path or create it inside the files dir.
  $webauth_path = variable_get('webauth_path', conf_path() . '/webauth');

  // Set .htaccess file location
  $webauth_htaccess = $webauth_path . '/.htaccess';

  // If webauth dir doesn't exist yet, create it.
  if (@is_dir($webauth_path) === FALSE) {
    // Create dir.
    mkdir($webauth_path, 0755);
  }

  // Copy necessary check.php file over.
  $default_check_file = drupal_get_path('module', 'webauth') . '/default/check.php';
  copy($default_check_file, $webauth_path . '/check.php');


  // Save .htaccess file to location.
  $fp = fopen($webauth_htaccess, 'w');
  fwrite($fp, $htaccess_file);
  fclose($fp);
}
